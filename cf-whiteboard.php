<?php
/*
Plugin Name: CF Whiteboard
Plugin URI: http://cfwhiteboard.com
Description: Connects CF Whiteboard to your blog. Please contact affiliatesupport@cfwhiteboard.com for more information or for a product demo.
Version: 1.58
Author: CF Whiteboard
*/
global $CFWHITEBOARD_VERSION;
$CFWHITEBOARD_VERSION = '1.58';



// Manage the "Athletes Page" on activation/deactivation
register_activation_hook(__FILE__, 'cfwhiteboard_activate_athletes_page');
register_deactivation_hook( __FILE__, 'cfwhiteboard_deactivate_athletes_page');
function cfwhiteboard_activate_athletes_page() {
    $options = cfwhiteboard_get_options();

    $page_id = $options['athletes_page_id'];
    $page = null;
    if(!empty($page_id)) $page = get_page($page_id);

    if (empty($page_id) || empty($page)) {
        // there was never a page or the page no longer exists
        // create an athletes page
        $page = array(
            // 'ID' => [ <post id> ] //Are you updating an existing post?
            // 'menu_order' => [ <order> ] //If new post is a page, sets the order should it appear in the tabs.
            'comment_status' => 'closed', // 'closed' means no comments.
            'ping_status' => 'closed', // 'closed' means pingbacks or trackbacks turned off
            // 'post_author' => [ <user ID> ] //The user ID number of the author.
            // 'post_category' => [ array(<category id>, <...>) ] //Add some categories.
            // 'post_content' => 'The body of this page is automatically generated by CF Whiteboard. You\'re welcome to edit the page title, the page permalink, or any other fields for this page.', //The full text of the post.
            // 'post_content' => 'Click Edit Post to see how to setup the Whiteboard when you&apos;re posting a WOD.', //The full text of the post.
            // 'post_date' => [ Y-m-d H:i:s ] //The time post was made.
            // 'post_date_gmt' => [ Y-m-d H:i:s ] //The time post was made, in GMT.
            // 'post_excerpt' => [ <an excerpt> ] //For all your post excerpt needs.
            // 'post_name' => 'athletes' // The name (slug) for your post
            // 'post_parent' => [ <post ID> ] //Sets the parent of the new post.
            'post_status' => 'publish', // [ 'draft' | 'publish' | 'pending'| 'future' | 'private' ] //Set the status of the new post. 
            'post_title' => 'Athletes', //The title of your post.
            'post_type' => 'page' //You may want to insert a regular post, page, link, a menu item or some custom post type
            // 'tags_input' => [ '<tag>, <tag>, <...>' ] //For tags.
            // 'tax_input' => [ array( 'taxonomy_name' => array( 'term', 'term2', 'term3' ) ) ] // support for custom taxonomies. 
        );
        $options['athletes_page_id'] = wp_insert_post( $page );

        if ($options['athletes_page_id'] == 0) return;  // retreat!

        update_option('cfwhiteboard_options', $options);
    } elseif ($page->post_status != 'publish') {
        // make sure the post is not trashed
        wp_publish_post( $page->ID );
    }
}
function cfwhiteboard_deactivate_athletes_page() {
    $options = cfwhiteboard_get_options();

    if( !empty($options['athletes_page_id']) ) {

        wp_delete_post( $options['athletes_page_id'] ); // send page to 'trash'

    }
}





// Manage the private Whiteboard example post on activation/deactivation
register_activation_hook(__FILE__, 'cfwhiteboard_activate_example_post');
register_deactivation_hook( __FILE__, 'cfwhiteboard_deactivate_example_post');
function cfwhiteboard_activate_example_post() {
    global $CFWHITEBOARD_WODS_META_KEY;
    $options = cfwhiteboard_get_options();

    $post_id = $options['example_post_id'];
    $post = null;
    if(!empty($post_id)) $post = get_post($post_id);

    if (empty($post_id) || empty($post)) {
        // there was never a page or the page no longer exists
        // create an example post
        $post = array(
            // 'ID' => [ <post id> ] //Are you updating an existing post?
            // 'menu_order' => [ <order> ] //If new post is a page, sets the order should it appear in the tabs.
            'comment_status' => 'closed', // 'closed' means no comments.
            'ping_status' => 'closed', // 'closed' means pingbacks or trackbacks turned off
            // 'post_author' => [ <user ID> ] //The user ID number of the author.
            // 'post_category' => [ array(<category id>, <...>) ] //Add some categories.
            // 'post_content' => 'The body of this page is automatically generated by CF Whiteboard. You\'re welcome to edit the page title, the page permalink, or any other fields for this page.', //The full text of the post.
            'post_content' => '<em>This is an example post generated for you to see how CF Whiteboard works. Edit this post to enter your WOD, write your blog post, delete this message, and publish! Don\'t forget to change it to a Public post. <strong><a href="mailto:faye@cfwhiteboard.com">Email Faye</a></strong> with any questions or for a quick phone demo.</em>

What\'s that button in the top right corner of today\'s post? It\'s a new <a href="http://cfwhiteboard.com">CrossFit workout tracker</a> that we are trying out. Click the Whiteboard button to add your score for today\'s workout. Each athlete who tracks their score will automatically get an athlete profile on <a href="'.get_permalink($options['athletes_page_id']).'">our new Athletes page</a> where you can search your old results and track your progress. Use it and let us know what you think!

<strong>Workout of the Day</strong>
Back Squat
10-10-10-10-10
at 60% of 1RM
<em>then</em>
21-15-9 reps for time of:
Wall Balls (20/14)
Burpee Pull-ups

<strong>Endurance</strong>
5 Rounds For Time:
200m uphill sprint
Rest 1 minute
200m downhill sprint
Rest 1 minute
', //The full text of the post.
            // 'post_date' => [ Y-m-d H:i:s ] //The time post was made.
            // 'post_date_gmt' => [ Y-m-d H:i:s ] //The time post was made, in GMT.
            // 'post_excerpt' => [ <an excerpt> ] //For all your post excerpt needs.
            // 'post_name' => 'athletes' // The name (slug) for your post
            // 'post_parent' => [ <post ID> ] //Sets the parent of the new post.
            'post_status' => 'private', // [ 'draft' | 'publish' | 'pending'| 'future' | 'private' ] //Set the status of the new post. 
            'post_title' => 'CF Whiteboard Example Post', //The title of your post.
            'post_type' => 'post' //You may want to insert a regular post, page, link, a menu item or some custom post type
            // 'tags_input' => [ '<tag>, <tag>, <...>' ] //For tags.
            // 'tax_input' => [ array( 'taxonomy_name' => array( 'term', 'term2', 'term3' ) ) ] // support for custom taxonomies. 
        );
        $options['example_post_id'] = wp_insert_post( $post );

        if ($options['example_post_id'] == 0) return;  // retreat!

        $wods = array();
        $wods[] = array(
            'name' => 'Workout of the Day',
            'components' => array(
                array(
                    'description' => 'Back Squat
10-10-10-10-10
at 60% of 1RM
',
                    'label' => 'Back Squat',
                    'wp_id' => 1
                ),
                array(
                    'description' => '21-15-9 reps for time of:
Wall Balls (20/14)
Burpee Pull-ups
',
                    'label' => '21-15-9',
                    'wp_id' => 2
                )
            ),
            'wp_id' => 1
        );
        $wods[] = array(
            'name' => 'Endurance',
            'components' => array(
                array(
                    'description' => '5 Rounds For Time:
200m uphill sprint
Rest 1 minute
200m downhill sprint
Rest 1 minute
',
                    'label' => 'Hill Sprints',
                    'wp_id' => 1
                )
            ),
            'wp_id' => 2
        );
        update_post_meta($options['example_post_id'], $CFWHITEBOARD_WODS_META_KEY, $wods);

        update_option('cfwhiteboard_options', $options);
    } elseif ($post->post_status != 'publish') {
        // make sure the post is not trashed
        wp_publish_post( $post->ID );
    }
}
function cfwhiteboard_deactivate_example_post() {
    $options = cfwhiteboard_get_options();

    if( !empty($options['example_post_id']) ) {

        wp_delete_post( $options['example_post_id'] ); // send post to 'trash'

    }
}





/* Display a plugin update notice that can be dismissed.  This notice is displayed on all admin pages until dismissed. */
add_action('admin_notices', 'cfw_admin_notice');
function cfw_admin_notice() {
    global $current_user;
    $user_id = $current_user->ID;

    if (current_user_can('manage_options')) {
        /* Before showing any messages, check that the user hasn't already clicked to ignore them */

        if (!get_user_meta($user_id, 'cfw_installation_notice')) {
            $pointer_content = '<div class="updated" style="background:#444; border:none; color:#fff; padding:15px 120px 15px 20px; text-align:left; line-height:1.4; font-size:13px; font-family:\'Helvetica Neue\', Helvetica, Verdana, sans-serif; border-radius:3px; text-shadow:0 -1px 0 #000; box-shadow:inset 0 1px 13px #000;">';
            $pointer_content .= '<p>';
            $pointer_content .= 'Thank you for installing <a href="http://cfwhiteboard.com" target="_blank" style="color:#01a1ff; text-decoration:underline;">CF Whiteboard</a>! Check out <a href="options-general.php?page=cf-whiteboard.php" style="color:#01a1ff; text-decoration:underline;">Settings > CF Whiteboard</a> to get started.';
            $current_url = 'http://'.$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"];
            if (stripos($current_url, '?') === false) {
                $current_url .= '?';
            }
            $pointer_content .= '<a href="'.$current_url.'&cfw_ignore=cfw_installation_notice" class="button" style="border-color:#fff; margin-left:10px;">Hide this message</a>';
            $pointer_content .= '</p>';
            $pointer_content .= '</div>';
            echo $pointer_content;
        }

    }
}
add_action('admin_init', 'cfw_notice_ignore');
function cfw_notice_ignore() {
    global $current_user;
    $user_id = $current_user->ID;
    /* If user clicks to ignore the notice, add that to their user meta */
    if ( isset($_GET['cfw_ignore']) && 'cfw_installation_notice' == $_GET['cfw_ignore'] ) {
         add_user_meta($user_id, 'cfw_installation_notice', 'true', true);
    }
}





// Utility Classes for normalization of Settings values
abstract class cfwhiteboard_Visibility
{
    const Users = 'users'; // logged-in WP users only
    const Everyone = 'everyone';
}

abstract class cfwhiteboard_Position
{
    const TitleRight = 'titleright'; // to the right of the title
    const CustomSelector = 'customselector'; // custom jquery selector

    // Custom Selector: Insertion Method
    const CustomSelectorInsertionAppend = 'append';
    const CustomSelectorInsertionPrepend = 'prepend';
    const CustomSelectorInsertionBefore = 'before';
    const CustomSelectorInsertionAfter = 'after';

    // Custom Selector: Alignment
    const CustomSelectorAlignmentFloatLeft = 'floatleft';
    const CustomSelectorAlignmentFloatRight = 'floatright';
    const CustomSelectorAlignmentInline = 'inline';
    const CustomSelectorAlignmentBlock = 'block';

    // Custom Selector: Embed the Whiteboard?
    const CustomSelectorDisplayButton = 'button';
    const CustomSelectorDisplayEmbed = 'embed';
}

global $CFWHITEBOARD_DEFAULT_OPTIONS;
$CFWHITEBOARD_DEFAULT_OPTIONS = array();
$CFWHITEBOARD_DEFAULT_OPTIONS['affiliate_id'] = urlencode( str_replace(array('.', '/'), '-', str_replace(array('http://', 'https://', 'www.'), '', home_url())) );
$CFWHITEBOARD_DEFAULT_OPTIONS['visibility'] = cfwhiteboard_Visibility::Everyone;
$CFWHITEBOARD_DEFAULT_OPTIONS['position'] = cfwhiteboard_Position::CustomSelector;
$CFWHITEBOARD_DEFAULT_OPTIONS['position_customselectorinsertion'] = cfwhiteboard_Position::CustomSelectorInsertionPrepend;
$CFWHITEBOARD_DEFAULT_OPTIONS['position_customselectortarget'] = '';
$CFWHITEBOARD_DEFAULT_OPTIONS['position_customselectorparent'] = '';
$CFWHITEBOARD_DEFAULT_OPTIONS['position_customselectoralignment'] = cfwhiteboard_Position::CustomSelectorAlignmentFloatRight;
$CFWHITEBOARD_DEFAULT_OPTIONS['position_customselectormargin'] = '0 0 10px 10px';
$CFWHITEBOARD_DEFAULT_OPTIONS['position_customselectordisplay'] = cfwhiteboard_Position::CustomSelectorDisplayButton;
// $CFWHITEBOARD_DEFAULT_OPTIONS['categories'] = array();

function cfwhiteboard_get_options() {
    global $CFWHITEBOARD_DEFAULT_OPTIONS;
    if (empty($CFWHITEBOARD_DEFAULT_OPTIONS)) $CFWHITEBOARD_DEFAULT_OPTIONS = array();

    $options = get_option('cfwhiteboard_options');
    if ($options == FALSE) $options = array();

    $options = array_merge($CFWHITEBOARD_DEFAULT_OPTIONS, $options);

    if (cfwhiteboard_is_preview_mode($options)) {
        $options['affiliate_id'] = $options['affiliate_id'] . '_preview';
    }

    return $options;
}

function cfwhiteboard_is_authorized($options) {
    if (empty($options) || empty($options['visibility'])) {
        $options = cfwhiteboard_get_options();
    }

    if ($options['visibility'] == cfwhiteboard_Visibility::Users) {
        return is_user_logged_in();
    }

    // assume $options['visibility'] == cfwhiteboard_Visibility::Everyone
    return true;
}

function cfwhiteboard_is_preview_mode($options) {
    if (empty($options) || empty($options['visibility'])) {
        $options = cfwhiteboard_get_options();
    }

    if ($options['visibility'] == cfwhiteboard_Visibility::Users) {
        return true;
    }

    // assume $options['visibility'] == cfwhiteboard_Visibility::Everyone
    return false;
}

function cfwhiteboard_is_proper_post($id = -1) {
    $currentId = get_the_ID();
    
    return ($id == $currentId) &&
        !is_feed() &&
        (get_post_type() == 'post');

        // old !is_page test
        // !is_page() &&

        // old in_the_loop test
        // in_the_loop() &&

        // old categories test
        // (
        //     empty($options['categories']) ||
        //     in_category($options['categories'])
        // );
}

function cfwhiteboard_get_wods($post_id) {
    global $CFWHITEBOARD_WODS_META_KEY;

    return get_post_meta($post_id, $CFWHITEBOARD_WODS_META_KEY, true);
}

function cfwhiteboard_generate_placeholder($post_id, $options, $wods) {
    if (empty($options) || empty($options['affiliate_id'])) {
        $options = cfwhiteboard_get_options();
    }

    $affiliateId = !empty($options['affiliate_id']) ? $options['affiliate_id'] : 'testaffiliate';
    
    if (!is_array($wods)) $wods = array();

    $data = array(
        "affiliateId" => $affiliateId,
        "postId" => $post_id,
        "postModified" => get_the_modified_time('Y-m-d H:i:s'),
        "wods" => $wods
    );

    $authorization = is_user_logged_in() ? 'data-authorization="admin"' : '';

    return '<div class="cfwhiteboard cleanslate" data-cfwhiteboard="'. esc_attr(json_encode($data)) .'" '. $authorization .'></div>';
}


add_action('wp', 'cfwhiteboard_init_whiteboard');
function cfwhiteboard_init_whiteboard() {
    $options = cfwhiteboard_get_options();

    // always allow template_redirect, as long as the plugin is activated.
    add_action('template_redirect', 'cfwhiteboard_json_meta');

    // Debugging
    // if (! (is_user_logged_in() && wp_get_current_user()->first_name == "Collin"))
    //     return;

    // don't include cfw files on admin pages, the athletes pages, or if the whiteboard is not visible to the current user
    if (is_admin() || !cfwhiteboard_is_authorized($options) || is_page($options['athletes_page_id']))
        return;
        
    add_action('wp_print_styles', 'cfwhiteboard_stylesheet', 999999);
    add_action('wp_enqueue_scripts', 'cfwhiteboard_scripts', 999999);
    add_action('wp_enqueue_scripts', 'cfwhiteboard_scripts_data', 1000000);
    add_action('wp_enqueue_scripts', 'cfwhiteboard_latest_jquery', 1);

    if ($options['position'] == cfwhiteboard_Position::CustomSelector) {
        add_filter('the_content', 'cfwhiteboard_add_to_post', 999999, 2);
        add_filter('the_excerpt', 'cfwhiteboard_add_to_post', 999999, 2);
    } else {
        add_filter('the_title', 'cfwhiteboard_add_to_post', 999999, 2);
    }
}

function cfwhiteboard_add_to_post($titleOrContent, $id = NULL) {
    $options = cfwhiteboard_get_options();

    if (empty($id)) $id = get_the_ID();

    // Workaround for bug in WP < 3.3 where title filters are passed the entire post object instead of just the id
    if (isset($id, $id->ID)) {
        $id = $id->ID;
    }
    
    // Debug info
    // if (cfwhiteboard_is_preview_mode($options)) {
    //     $titleOrContent .= '<span style="display:none !important;width:0;height:0;">' .
    //         '  title_for_id: ' . $id .
    //         ', current_id = ' . get_the_ID() .
    //         ', is_feed = ' . (is_feed() ? 'true' : 'false') .
    //         ', is_page = ' . (is_page() ? 'true' : 'false') .
    //         ', in_the_loop = ' . (in_the_loop() ? 'true' : 'false') .
    //         ', post_type = ' . get_post_type() .
    //         '</span>';
    // }


    if (! cfwhiteboard_is_proper_post($id))
        return $titleOrContent;

    $wods = cfwhiteboard_get_wods($id);
    if ((!is_array($wods)) || empty($wods))
        return $titleOrContent;

    $wods = cfwhiteboard_clean_post_meta($wods);
    if ((!is_array($wods)) || empty($wods))
        return $titleOrContent;
    
    $cfw_placeholder = cfwhiteboard_generate_placeholder(get_the_ID(), $options, $wods);
	return $cfw_placeholder . $titleOrContent;
}

function cfwhiteboard_stylesheet() {
    global $CFWHITEBOARD_VERSION;
    if (!isset($CFWHITEBOARD_VERSION)) $CFWHITEBOARD_VERSION = '0.0';
    
    wp_register_style('cfwhiteboard',
        plugins_url('cfwhiteboard.css', __FILE__),
        false,
        $CFWHITEBOARD_VERSION
    );
    wp_enqueue_style( 'cfwhiteboard');
}

function cfwhiteboard_scripts() {
    global $CFWHITEBOARD_VERSION;
    if (!isset($CFWHITEBOARD_VERSION)) $CFWHITEBOARD_VERSION = '0.0';

    wp_enqueue_script('cfwhiteboard',
        plugins_url('all-whiteboard.js', __FILE__),
        array('jquery'),
        $CFWHITEBOARD_VERSION
    );
}

function cfwhiteboard_latest_jquery($version) {
    wp_deregister_script('jquery'); 
    wp_register_script('jquery',
        plugins_url('jquery.js', __FILE__),
        false,
        '1.7.2'
    );
    wp_enqueue_script('jquery');
}

function cfwhiteboard_scripts_data() {
    $options = cfwhiteboard_get_options();

    $data = array();
    $data['athletes_page_permalink'] = get_permalink( $options['athletes_page_id'] );

    if ($options['position'] == cfwhiteboard_Position::CustomSelector) {
        $data['position'] = array();
        $data['position']['insertion'] = $options['position_customselectorinsertion'];
        $data['position']['target'] = $options['position_customselectortarget'];
        $data['position']['parent'] = $options['position_customselectorparent'];
        $data['position']['alignment'] = $options['position_customselectoralignment'];
        $data['position']['margin'] = $options['position_customselectormargin'];
        $data['position']['display'] = $options['position_customselectordisplay'];
    }

    wp_localize_script('cfwhiteboard', 'CFW_OPTIONS', $data);
}


function cfwhiteboard_options_page() {
    global $CFWHITEBOARD_DEFAULT_OPTIONS;
    if (!isset($CFWHITEBOARD_DEFAULT_OPTIONS)) $CFWHITEBOARD_DEFAULT_OPTIONS = array();

	// Require admin privs
	if ( ! current_user_can('manage_options') )
		return false;
	

    // $category_prefix = 'CFWHITEBOARD_category_';
  
    // Make available services extensible via plugins, themes (functions.php), etc.
    // $A2A_SHARE_SAVE_services = apply_filters('A2A_SHARE_SAVE_services', $A2A_SHARE_SAVE_services);

    if (isset($_POST['Submit'])) {
        
        // Nonce verification 
        check_admin_referer('cfwhiteboard-update-options');
    
        $new_options = cfwhiteboard_get_options();
        
        // Affiliate ID
        if (!empty($_POST['CFWHITEBOARD_affiliate_id']))
            $new_options['affiliate_id'] = @$_POST['CFWHITEBOARD_affiliate_id'];

        // Visibility (Preview Mode)
        if (isset($_POST['CFWHITEBOARD_visibility']))
            $new_options['visibility'] = @$_POST['CFWHITEBOARD_visibility'];

        // Position
        if (isset($_POST['CFWHITEBOARD_position']))
            $new_options['position'] = @$_POST['CFWHITEBOARD_position'];

        // Custom Selector Fields
        if (!empty($_POST['CFWHITEBOARD_position_customselectorinsertion']))
            $new_options['position_customselectorinsertion'] = @$_POST['CFWHITEBOARD_position_customselectorinsertion'];
        if (!empty($_POST['CFWHITEBOARD_position_customselectortarget']))
            $new_options['position_customselectortarget'] = @$_POST['CFWHITEBOARD_position_customselectortarget'];
        if (!empty($_POST['CFWHITEBOARD_position_customselectorparent']))
            $new_options['position_customselectorparent'] = @$_POST['CFWHITEBOARD_position_customselectorparent'];
        if (!empty($_POST['CFWHITEBOARD_position_customselectoralignment']))
            $new_options['position_customselectoralignment'] = @$_POST['CFWHITEBOARD_position_customselectoralignment'];
        if (!empty($_POST['CFWHITEBOARD_position_customselectormargin']))
            $new_options['position_customselectormargin'] = @$_POST['CFWHITEBOARD_position_customselectormargin'];
        if (!empty($_POST['CFWHITEBOARD_position_customselectordisplay']))
            $new_options['position_customselectordisplay'] = @$_POST['CFWHITEBOARD_position_customselectordisplay'];

        // Categories
        // $new_options['categories'] = array();
        // $categories = get_categories($category_args);
        // foreach($categories as $category) {
        //     if (!empty($_POST[$category_prefix . $category->cat_ID])) {
        //         array_push($new_options['categories'], $category->cat_ID);
        //     }
        // }

        // Preview Only (Whiteboard is only visible to logged-in WordPress users.  Workout entries will not be saved.)
        // Active (Whiteboard is visible to anyone who visits your website.  Workout entries will be saved.)

        // $new_options['position'] = ($_POST['A2A_SHARE_SAVE_position']) ? @$_POST['A2A_SHARE_SAVE_position'] : 'bottom';
        // $new_options['display_in_posts_on_front_page'] = (@$_POST['A2A_SHARE_SAVE_display_in_posts_on_front_page']=='1') ? '1':'-1';
        // $new_options['display_in_excerpts'] = (@$_POST['A2A_SHARE_SAVE_display_in_excerpts']=='1') ? '1':'-1';
        // $new_options['display_in_posts'] = (@$_POST['A2A_SHARE_SAVE_display_in_posts']=='1') ? '1':'-1';
        // $new_options['display_in_pages'] = (@$_POST['A2A_SHARE_SAVE_display_in_pages']=='1') ? '1':'-1';
        // $new_options['display_in_feed'] = (@$_POST['A2A_SHARE_SAVE_display_in_feed']=='1') ? '1':'-1';
        // $new_options['show_title'] = (@$_POST['A2A_SHARE_SAVE_show_title']=='1') ? '1':'-1';
        // $new_options['onclick'] = (@$_POST['A2A_SHARE_SAVE_onclick']=='1') ? '1':'-1';
        // $new_options['button'] = @$_POST['A2A_SHARE_SAVE_button'];
        // $new_options['button_custom'] = @$_POST['A2A_SHARE_SAVE_button_custom'];
        // $new_options['additional_js_variables'] = trim(@$_POST['A2A_SHARE_SAVE_additional_js_variables']);
        // $new_options['inline_css'] = (@$_POST['A2A_SHARE_SAVE_inline_css']=='1') ? '1':'-1';
        // $new_options['cache'] = (@$_POST['A2A_SHARE_SAVE_cache']=='1') ? '1':'-1';
        // 
        // // Schedule cache refresh?
        // if (@$_POST['A2A_SHARE_SAVE_cache']=='1') {
        //  A2A_SHARE_SAVE_schedule_cache();
        //  A2A_SHARE_SAVE_refresh_cache();
        // } else {
        //  A2A_SHARE_SAVE_unschedule_cache();
        // }
        // 
        // // Store desired text if 16 x 16px buttons or text-only is chosen:
        // if( $new_options['button'] == 'favicon.png|16|16' )
        //  $new_options['button_text'] = $_POST['A2A_SHARE_SAVE_button_favicon_16_16_text'];
        // elseif( $new_options['button'] == 'share_16_16.png|16|16' )
        //  $new_options['button_text'] = $_POST['A2A_SHARE_SAVE_button_share_16_16_text'];
        // else
        //  $new_options['button_text'] = ( trim($_POST['A2A_SHARE_SAVE_button_text']) != '' ) ? $_POST['A2A_SHARE_SAVE_button_text'] : __('Share/Bookmark','add-to-any');
        //  
        // // Store chosen individual services to make active
        // $active_services = Array();
        // if ( ! isset($_POST['A2A_SHARE_SAVE_active_services']))
        //  $_POST['A2A_SHARE_SAVE_active_services'] = Array();
        // foreach ( $_POST['A2A_SHARE_SAVE_active_services'] as $dummy=>$sitename )
        //  $active_services[] = substr($sitename, 7);
        // $new_options['active_services'] = $active_services;
        // 
        // // Store special service options
        // $new_options['special_facebook_like_options'] = array(
        //  'verb' => ((@$_POST['addtoany_facebook_like_verb'] == 'recommend') ? 'recommend' : 'like')
        // );
        // $new_options['special_twitter_tweet_options'] = array(
        //  'show_count' => ((@$_POST['addtoany_twitter_tweet_show_count'] == '1') ? '1' : '-1')
        // );
        // $new_options['special_google_plusone_options'] = array(
        //  'show_count' => ((@$_POST['addtoany_google_plusone_show_count'] == '1') ? '1' : '-1')
        // );
		
    	update_option('cfwhiteboard_options', $new_options);
    
		?>
    	<div class="updated fade">
            <p>
                <strong><?php _e('Settings saved.'); ?></strong>
                <?php _e('Please empty the page cache for new settings to take effect.', 'cf-whiteboard'); ?>
            </p>
        </div>
		<?php
		
    } else if (isset($_POST['Reset'])) {
         // Nonce verification 
          check_admin_referer('cfwhiteboard-update-options');
		  
		  delete_option('cfwhiteboard_options');
    }

    $options = cfwhiteboard_get_options();

    // Get info for the categories options
    // $category_args = array(
    //     'orderby' => 'name',
    //     'hide_empty' => 0
    // );
    // $categories = get_categories($category_args);
    // foreach($categories as $category) {
    //     $category->selected = empty($options['categories']) ? true : in_array($category->cat_ID, $options['categories']);
    // } 
	
    ?>
    
    <style>
        form > fieldset {
            border: 1px solid #ccc;
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
            padding: 10px 15px;
        }
        fieldset + fieldset {
            margin-top: 15px;
        }
        fieldset ul {
            margin: 0;
        }
        form > fieldset > ul > li {
            padding-left: 24px;
            text-indent: -24px;
        }
        form > fieldset > ul > li > * {
            text-indent: 0;
        }
        fieldset h1 {
            font-size: 1em;
        }

        fieldset ul li fieldset {
            background: #f5f5f5;
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
            margin-top: 7px;
            padding: 10px 12px;
            text-shadow: 0 1px 0 #fff;
        }
        fieldset ul li fieldset label {
            display: inline-block;
            width: 100px;
            *zoom: 1;
            *display: inline;
        }

        input[type="radio"],
        input[type="checkbox"] {
            font-size: 19px;
        }
        input[type="radio"] + label,
        input[type="checkbox"] + label {
            line-height: 19px;
            margin-left: 5px;
        }
    </style>

    <div class="wrap">
	
    <h2><!-- Leave Empty so that the notices don't separate our Welcome heading from our Welcome text --></h2>
    <div style="max-width:600px; text-align:left; line-height:1.4; font-size:13px; font-family:'Helvetica Neue', Helvetica, Verdana, sans-serif;">
        <h2>Welcome to CF Whiteboard <a style="display:inline-block;vertical-align:text-top;font-size:12px;background:#eee;border-radius:3px;padding:0 6px;margin:0;line-height:2;*zoom:1;*display:inline;" href="http://cfwhiteboard.com">Company Website</a> <a style="display:inline-block;vertical-align:text-top;font-size:12px;background:#eee;border-radius:3px;padding:0 6px;margin:0;line-height:2;*zoom:1;*display:inline;" href="http://cfwhiteboard.com/terms">Terms of Service</a></h2>
        <p style="background:#444; border:none; color:#fff; padding:12px 15px; border-radius:3px; text-shadow:0 -1px 0 #000; box-shadow:inset 0 1px 13px #000;">
            Please <a href="mailto:affiliatesupport@cfwhiteboard.com" style="color:#01a1ff;">email us</a> with any questions or feedback.
            We have helped most of our gyms with setting up a custom Whiteboard position, adding the Athletes page to their main menu, and other wordpress-related requests.
            Let us know how we can help! <a href="mailto:affiliatesupport@cfwhiteboard.com" style="color:#01a1ff;">affiliatesupport@cfwhiteboard.com</a>
        </p>
        <p>
            CF Whiteboard is a workout tracking system for CrossFit<sup>&reg;</sup> affiliates.
            It integrates into your website and allows your athletes to track their
            results and look them up later. CF Whiteboard upgrades your website in two ways:
        </p>
        <ul style="padding-left: 20px;">
            <li>
                <strong>The Whiteboard</strong>: When you post the workout of the day, a Whiteboard widget is added to your posts.
                Your athletes can enter their results into the Whiteboard or browse other athlete's scores.
                <?php $example_post_url = get_permalink($options['example_post_id']) ?>
                <?php if (!empty($example_post_url)) { ?>
                    You can try it out on this <a href="<?php echo $example_post_url; ?>">private example post</a> that we created on your site.
                <?php } ?>
            </li>
            <li>
                <strong>Athletes Page</strong>: An Athletes page is added to your site.
                Any athlete that tracks their results using the Whiteboard will get an athlete profile that
                displays their personal workout history and allows them to search their past results.
            </li>
        </ul>
        <p>
            Check out <a href="http://crossfitroots.com" target="_blank">CrossFit Roots</a> (Boulder, CO)
            or <a href="http://crossfitforeverstrong.com" target="_blank">CrossFit Forever Strong</a> (Phoenix, AZ)
            to see CF Whiteboard in action.
        </p>
        <p>
            Our goal is to get ALL of your athletes tracking their workouts and measuring their progress.
            The best way you can help is by sending us ideas and passing along anything you hear from your athletes.
            To give you an idea of what's ahead, our future plans include:
        </p>
        <ul style="padding-left: 20px;">
            <li><strong>Mobile App</strong></li>
            <li><strong>Social features</strong> (comments, likes, &amp; integration with facebook and twitter)</li>
            <li><strong>Leaderboards</strong> at your gym (and ability to compare within your region/state/country/world.</li>
        </ul>
    </div>

    <hr style="max-width:600px; border:2px solid #CCC; margin:25px 0 5px;" />

    <div id="icon-options-general" class="icon32"></div>
    <h2>CF Whiteboard <?php _e( 'Settings' ); ?></h2>

    <form method="post" action="" style="max-width:600px;">
        
	    <?php wp_nonce_field('cfwhiteboard-update-options'); ?>

        <p>
            <label for="CFWHITEBOARD_affiliate_id">
                <strong><?php _e('Affiliate ID:', 'cf-whiteboard'); ?></strong>
            </label>
            <input type="text" id="CFWHITEBOARD_affiliate_id" name="CFWHITEBOARD_affiliate_id" value="<?php echo esc_attr( preg_replace('/_preview$/', '', $options['affiliate_id']) ); ?>" />
            <label for="CFWHITEBOARD_affiliate_id">
                <?php _e('(Caution: Changing this value could result in data loss.)', 'cf-whiteboard'); ?>
            </label>
        </p>
        
        <fieldset>
            <legend><?php _e('Visibility Mode', 'cf-whiteboard'); ?></legend>
            <ul>
                <li>
                    <input type="radio" id="CFWHITEBOARD_visibility_everyone" name="CFWHITEBOARD_visibility" value="<?php echo esc_attr( cfwhiteboard_Visibility::Everyone ); ?>" <?php echo $options['visibility'] == cfwhiteboard_Visibility::Everyone ? 'checked="checked"' : ''; ?> />
                    <label for="CFWHITEBOARD_visibility_everyone">
                        <strong><?php _e('Live Mode.', 'cf-whiteboard'); ?></strong> <?php _e('Anyone on the web can see the whiteboard. Whiteboard entries will be saved.', 'cf-whiteboard'); ?>
                    </label>
                </li>
                <li>
                    <input type="radio" id="CFWHITEBOARD_visibility_users" name="CFWHITEBOARD_visibility" value="<?php echo esc_attr( cfwhiteboard_Visibility::Users ); ?>" <?php echo $options['visibility'] == cfwhiteboard_Visibility::Users ? 'checked="checked"' : ''; ?> />
                    <label for="CFWHITEBOARD_visibility_users">
                        <strong><?php _e('Developer Mode.', 'cf-whiteboard'); ?></strong> <?php _e('Athletes cannot see the whiteboard. Only logged-in WordPress users can see the whiteboard.  Whiteboard entries will be removed when you switch to Live Mode, so feel free to experiment.', 'cf-whiteboard'); ?>
                    </label>
                </li>
            </ul>
        </fieldset>
        
        <fieldset>
            <legend><?php _e('Whiteboard Position', 'cf-whiteboard'); ?></legend>
            <ul>
                <script type="text/javascript">
                    jQuery(function($) {
                        $('input[name="CFWHITEBOARD_position"]').click(function() {
                            var $this = $(this);
                            if ($this.val() == '<?php echo cfwhiteboard_Position::CustomSelector; ?>') {
                                $this.closest('li').find('fieldset').css('opacity', 0).slideDown().queue(function() {
                                    $(this).animate({opacity: 1});
                                    $(this).dequeue();
                                });
                            } else {
                                $this.closest('ul').find('fieldset').animate({opacity: 0}).queue(function() {
                                    $(this).slideUp();
                                    $(this).dequeue();
                                });
                            }
                        });
                    });
                </script>
                <li>
                    <input type="radio" id="CFWHITEBOARD_position_customselector" name="CFWHITEBOARD_position" value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelector ); ?>" <?php echo $options['position'] == cfwhiteboard_Position::CustomSelector ? 'checked="checked"' : ''; ?> />
                    <label for="CFWHITEBOARD_position_customselector">
                        <strong><?php _e('Custom Position.', 'cf-whiteboard'); ?></strong> <?php _e('<a href="mailto:affiliatesupport@cfwhiteboard.com">Affiliate Support</a> would be happy to help you with this.', 'cf-whiteboard'); ?>
                    </label>
                    <fieldset <?php echo $options['position'] == cfwhiteboard_Position::CustomSelector ? '' : 'style="display:none;"'; ?> >
                        <ul>
                            <li>
                                <em><?php _e('All fields are required.', 'cf-whiteboard'); ?></em>
                            </li>
                            <li>
                                <label for="CFWHITEBOARD_position_customselectorinsertion"><?php _e('Insertion Method', 'cf-whiteboard'); ?></label>
                                <select id="CFWHITEBOARD_position_customselectorinsertion" name="CFWHITEBOARD_position_customselectorinsertion">
                                    <option value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelectorInsertionAppend ); ?>" <?php echo $options['position_customselectorinsertion'] == cfwhiteboard_Position::CustomSelectorInsertionAppend ? 'selected="selected"' : ''; ?> >Append To</option>
                                    <option value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelectorInsertionPrepend ); ?>" <?php echo $options['position_customselectorinsertion'] == cfwhiteboard_Position::CustomSelectorInsertionPrepend ? 'selected="selected"' : ''; ?> >Prepend To</option>
                                    <option value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelectorInsertionBefore ); ?>" <?php echo $options['position_customselectorinsertion'] == cfwhiteboard_Position::CustomSelectorInsertionBefore ? 'selected="selected"' : ''; ?> >Insert Before</option>
                                    <option value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelectorInsertionAfter ); ?>" <?php echo $options['position_customselectorinsertion'] == cfwhiteboard_Position::CustomSelectorInsertionAfter ? 'selected="selected"' : ''; ?> >Insert After</option>
                                </select>
                            </li>
                            <li>
                                <label for="CFWHITEBOARD_position_customselectortarget"><?php _e('Target Selector', 'cf-whiteboard'); ?></label>
                                <input id="CFWHITEBOARD_position_customselectortarget" type="text" name="CFWHITEBOARD_position_customselectortarget" value="<?php echo esc_attr( $options['position_customselectortarget'] ); ?>" size="50" />
                            </li>
                            <li>
                                <label for="CFWHITEBOARD_position_customselectorparent"><?php _e('Parent Selector', 'cf-whiteboard'); ?></label>
                                <input id="CFWHITEBOARD_position_customselectorparent" type="text" name="CFWHITEBOARD_position_customselectorparent" value="<?php echo esc_attr( $options['position_customselectorparent'] ); ?>" size="50" />
                            </li>
                            <li>
                                <label for="CFWHITEBOARD_position_customselectoralignment"><?php _e('Alignment', 'cf-whiteboard'); ?></label>
                                <select id="CFWHITEBOARD_position_customselectoralignment" name="CFWHITEBOARD_position_customselectoralignment">
                                    <option value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelectorAlignmentFloatLeft ); ?>" <?php echo $options['position_customselectoralignment'] == cfwhiteboard_Position::CustomSelectorAlignmentFloatLeft ? 'selected="selected"' : ''; ?> >Float Left</option>
                                    <option value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelectorAlignmentFloatRight ); ?>" <?php echo $options['position_customselectoralignment'] == cfwhiteboard_Position::CustomSelectorAlignmentFloatRight ? 'selected="selected"' : ''; ?> >Float Right</option>
                                    <option value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelectorAlignmentInline ); ?>" <?php echo $options['position_customselectoralignment'] == cfwhiteboard_Position::CustomSelectorAlignmentInline ? 'selected="selected"' : ''; ?> >Inline</option>
                                    <option value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelectorAlignmentBlock ); ?>" <?php echo $options['position_customselectoralignment'] == cfwhiteboard_Position::CustomSelectorAlignmentBlock ? 'selected="selected"' : ''; ?> >Block</option>
                                </select>
                            </li>
                            <li>
                                <label for="CFWHITEBOARD_position_customselectormargin"><?php _e('Margin', 'cf-whiteboard'); ?></label>
                                <input id="CFWHITEBOARD_position_customselectormargin" type="text" name="CFWHITEBOARD_position_customselectormargin" value="<?php echo esc_attr( $options['position_customselectormargin'] ); ?>" size="50" />
                            </li>
                            <li>
                                <label for="CFWHITEBOARD_position_customselectordisplay"><?php _e('Display Type', 'cf-whiteboard'); ?></label>
                                <select id="CFWHITEBOARD_position_customselectordisplay" name="CFWHITEBOARD_position_customselectordisplay">
                                    <option value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelectorDisplayButton ); ?>" <?php echo $options['position_customselectordisplay'] == cfwhiteboard_Position::CustomSelectorDisplayButton ? 'selected="selected"' : ''; ?> >Show Whiteboard Button</option>
                                    <option value="<?php echo esc_attr( cfwhiteboard_Position::CustomSelectorDisplayEmbed ); ?>" <?php echo $options['position_customselectordisplay'] == cfwhiteboard_Position::CustomSelectorDisplayEmbed ? 'selected="selected"' : ''; ?> >Embed Whiteboard</option>
                                </select>
                            </li>
                        </ul>
                    </fieldset>
                </li>
                <li>
                    <input type="radio" id="CFWHITEBOARD_position_titleright" name="CFWHITEBOARD_position" value="<?php echo esc_attr( cfwhiteboard_Position::TitleRight ); ?>" <?php echo $options['position'] == cfwhiteboard_Position::TitleRight ? 'checked="checked"' : ''; ?> />
                    <label for="CFWHITEBOARD_position_titleright">
                        <strong><?php _e('Post Title.', 'cf-whiteboard'); ?></strong> <?php _e('The whiteboard is positioned to the right of the post title. Improves performance but not compatible with all themes.', 'cf-whiteboard'); ?>
                    </label>
                </li>
            </ul>
        </fieldset>

<!--
        <fieldset>
            <legend><php _e('WOD Blog Category', 'cf-whiteboard'); ?></legend>
            <h1><php _e('Which post categories should the whiteboard be added to?', 'cf-whiteboard'); ?></h1>
            <ul>
                <php foreach($categories as $category) { ?>
                    <li>
                        <input type="checkbox" id="<php echo $category_prefix . $category->cat_ID; ?>" name="<php echo $category_prefix . $category->cat_ID; ?>" <php echo $category->selected ? 'checked="checked"' : ''; ?> />
                        <label for="<php echo $category_prefix . $category->cat_ID; ?>">
                            <php echo $category->cat_name; ?>
                        </label>
                    </li>
                <php } ?>
            </ul>
        </fieldset>
-->

        <p class="submit">
            <input class="button-primary" type="submit" name="Submit" value="<?php esc_attr_e('Save Changes', 'cf-whiteboard' ); ?>" />
            <!-- <input type="submit" name="Reset" onclick="return confirm('<php _e('Are you sure you want to delete all CF Whiteboard options?', 'cf-whiteboard'); ?>')" value="<php _e('Reset', 'cf-whiteboard'); ?>" /> -->
        </p>
    
    </form>
        
    <p><strong><?php _e('Need support?','cf-whiteboard'); ?></strong> <a href="mailto:affiliatesupport@cfwhiteboard.com"><?php _e('Email Us', 'cf-whiteboard'); ?></a></p>
    
    </div>

<?php
 
}

function cfwhiteboard_add_menu_link() {
	if( current_user_can('manage_options') ) {
		$page = add_options_page(
			__('CF Whiteboard ', 'cf-whiteboard') . __("Settings"),
			'CF Whiteboard',
			'activate_plugins',
			basename(__FILE__),
			'cfwhiteboard_options_page'
		);
		
		/* Using registered $page handle to hook script load, to only load in AddToAny admin */
        // add_filter('admin_print_scripts-' . $page, 'A2A_SHARE_SAVE_scripts');
	}
}
add_filter('admin_menu', 'cfwhiteboard_add_menu_link');


// Place in Option List on Settings > Plugins page
function cfwhiteboard_actlinks($links, $file){
    // Static so we don't call plugin_basename on every plugin row.
    static $this_plugin;
    if ( ! $this_plugin ) $this_plugin = plugin_basename(__FILE__);
    
    if ( $file == $this_plugin ){
        $support_link = '<a href="mailto:affiliatesupport@cfwhiteboard.com">' . __('Support') . '</a>';
        $settings_link = '<a href="options-general.php?page=cf-whiteboard.php">' . __('Settings') . '</a>';

        array_unshift( $links, $support_link ); // before other links
        array_unshift( $links, $settings_link ); // before other links
    }
    return $links;
}
add_filter("plugin_action_links", 'cfwhiteboard_actlinks', 10, 2);



// Custom Meta Boxes on Add/Edit Post page
global $CFWHITEBOARD_WODS_META_KEY;
$CFWHITEBOARD_WODS_META_KEY = 'cfwhiteboard-wods';
add_action('load-post.php', 'cfwhiteboard_setup_post_meta_boxes');
add_action('load-post-new.php', 'cfwhiteboard_setup_post_meta_boxes');
/* Save post meta on the 'save_post' hook. */
add_action('save_post', 'cfwhiteboard_save_post_meta_boxes', 10, 2);
/* Clean post meta on the 'publish_post' hook. */
// add_action('publish_post', 'cfwhiteboard_clean_post_meta', 10, 1);
// add_action('admin_enqueue_scripts', 'cfwhiteboard_latest_jquery');

/* Meta box setup function. */
function cfwhiteboard_setup_post_meta_boxes() {
    /* Add meta boxes on the 'add_meta_boxes' hook. */
    add_action('add_meta_boxes', 'cfwhiteboard_add_post_meta_boxes', 1);

    /* Add tinymce button & plugin */
    add_filter('mce_buttons_2', 'cfwhiteboard_mce_buttons');
    add_filter('mce_external_plugins', 'cfwhiteboard_mce_external_plugins');

    /* Add admin notices (if post was just saved) */
    add_action('admin_notices', 'cfwhiteboard_save_post_meta_notices');
}

/* Create one or more meta boxes to be displayed on the post editor screen. */
function cfwhiteboard_add_post_meta_boxes() {
    add_meta_box(
        'cfwhiteboard-wods-meta', // Unique ID
        esc_html__('CF Whiteboard', 'cf-whiteboard'),      // Title
        'cfwhiteboard_wods_meta_box',     // Callback function
        'post',                 // Admin page (or post type)
        'normal',                 // Context
        'core'                   // Priority
    );
}

/* Generate the fields for a "class" in the post meta box. */
function cfwhiteboard_generate_class_fields($class) {
    $class_id = esc_attr( $class['wp_id'] );
    $class_prefix = 'cfwhiteboard-wod-' . $class_id;
    $class_name_attr = $class_prefix . '-name';

    $component_fields = '';
    foreach ($class['components'] as $component) {
        $component_fields .= cfwhiteboard_generate_class_component_fields($class_prefix . '-cmp-', $component);
    }

    return '
    <table class="'. (count($class['components']) > 1 ? 'multi-component' : 'single-component') .'">
        <thead>
            <tr>
                <th>
                    <label for="'. $class_name_attr .'">
                        '. esc_html__("Class Name", 'cf-whiteboard') .'
                        <a href="javascript://" class="help-alert" data-message="Each class gets a separate tab in the Whiteboard. You can track as many classes as you want.<br><br>Example Class Names: WOD, Oly, Strength, Endurance, Erg, Zumba (kidding!)">(Help)</a>
                    </label>
                </th>
                <td>
                    <a href="javascript://" class="remove-class delete">
                        &ndash; '. esc_html__("Remove This Class", 'cf-whiteboard') .'
                    </a>
                    <input type="text" id="'. $class_name_attr .'" name="'. $class_name_attr .'"
                        value="'. esc_attr( $class['name'] ) .'" />
                </td>
            </tr>
        </thead>
    '. $component_fields .'
    </table>
    <div class="tools">
        <a href="javascript://" class="add-component" data-classid="'. $class_id .'">
            + '. esc_html__("Track Another Component", 'cf-whiteboard') .'
        </a>
    </div>
    ';
}
function cfwhiteboard_generate_class_component_fields($component_prefix, $component) {
    $cmp_id = esc_attr( $component['wp_id'] );
    $description_name = $component_prefix . $cmp_id . '-description';
    $label_name = $component_prefix . $cmp_id . '-label';

    $has_label = !empty($component['label']);

    return '
        <tbody>
            <tr>
                <th>
                    <label for="'. $description_name .'">
                        '. esc_html__("Component", 'cf-whiteboard') .' <span class="component-index"></span>
                        <a href="javascript://" class="help-alert" data-message="Each class needs 1 or more components. Athletes will be able to search the component descriptions to recall workout results in the future.<br><br>Example WOD:<br><br>Component 1:<br>Deadlift<br>5-5-5-5-5<br><br>Component 2:<br>&quot;Fran&quot;<br>21-15-9 reps, for time<br>Thruster 95 lbs<br>Pull-ups">(Help)</a>
                    </label>
                    <p>
                        '. esc_html__("Include rep scheme & loading", 'cf-whiteboard') .'
                    </p>
                    <p>
                        '. esc_html__("Break strength/skill work into separate components if you want athletes to track them individually", 'cf-whiteboard') .'
                    </p>
                </th>
                <td>
                    <textarea id="'. $description_name .'" name="'. $description_name .'" class="widefat" rows="5">'.
                        esc_textarea( $component['description'] )
                    .'</textarea>
                </td>
            </tr>
            <tr>
                <th>
                    <label for="'. $label_name .'" '. ($has_label ? '' : 'class="hidden"') .'>
                        '. esc_html__("Component Label", 'cf-whiteboard') .'
                        <a href="javascript://" class="help-alert" data-message="The label is used as a short description for the component on the Whiteboard and on athlete profiles. Shorter labels are better, but they&apos;re just labels so they don&apos;t have to be perfect.<br><br>Example Component Labels: Deadlift, Fran, 3 Rounds, AMRAP 20min, 21-15-9">(Help)</a>
                    </label>
                </th>
                <td>
                    <span class="component-label-show '. ($has_label ? '' : 'hidden') .'">
                        <span>'. esc_html( $component['label'] ) .'</span>
                        <a href="javascript://" class="button edit">'. esc_html__("Edit") .'</a>
                    </span>
                    <span class="component-label-edit hidden">
                        <input type="text" id="'. $label_name .'" name="'. $label_name .'"
                            value="'. esc_attr( $component['label'] ) .'" />
                        <a href="javascript://" class="button save">'. esc_html__("OK") .'</a>
                        <a href="javascript://" class="cancel">'. esc_html__("Cancel") .'</a>
                    </span>
                    <a href="javascript://" class="multi-component remove-component delete">
                        &ndash; '. esc_html__("Remove This Component", 'cf-whiteboard') .'
                    </a>
                </td>
            </tr>
        </tbody>
    ';
}
function cfwhiteboard_wods_meta_box($object, $box) {
    global $CFWHITEBOARD_WODS_META_KEY; ?>

    <?php wp_nonce_field(basename( __FILE__ ), $CFWHITEBOARD_WODS_META_KEY); ?>
    <style type="text/css">
        #cfwhiteboard-wods-meta {
            margin-top: 30px;
            margin-bottom: 40px;
        }
        #cfwhiteboard-wods-meta .inside {
            background: #555;
            -webkit-border-bottom-left-radius: inherit;
            -moz-border-radius-bottomleft: inherit;
            border-radius-bottom-left: inherit;
            -webkit-border-bottom-right-radius: inherit;
            -moz-border-radius-bottomright: inherit;
            border-radius-bottom-right: inherit;
            -webkit-box-shadow: inset 0 1px 6px rgba(0,0,0,.6);
            -moz-box-shadow: inset 0 1px 6px rgba(0,0,0,.6);
            box-shadow: inset 0 1px 6px rgba(0,0,0,.6);
            margin: 0;
        }
        #cfwhiteboard-wods-meta p.help {
            color: #ddd;
            font-size: 11px;
            font-style: normal;
            line-height: 1.3;
            margin: 0;
            padding: 16px 20px 4px;
        }
        #cfwhiteboard-wods-meta p.help + p.help {
            padding-top: 4px;
            padding-bottom: 16px;
        }
        #cfwhiteboard-wods-meta p.help:hover {
            color: #fff;
        }
        #cfwhiteboard-wods-meta .hidden {
            display: none;
        }
        #cfwhiteboard-wods-meta ul {
            margin: 0;
            padding: 0 6px;
        }
        #cfwhiteboard-wods-meta ul li,
        #cfwhiteboard-wods-meta p.tools a {
            background: #f5f5f5;
            -webkit-border-radius: 5px;
            -moz-border-radius: 5px;
            border-radius: 5px;
            -webkit-box-shadow: 0 1px 6px rgba(0,0,0,.6);
            -moz-box-shadow: 0 1px 6px rgba(0,0,0,.6);
            box-shadow: 0 1px 6px rgba(0,0,0,.6);
        }
        #cfwhiteboard-wods-meta ul li {
            margin: 0 0 20px;
            padding: 0;
        }
        #cfwhiteboard-wods-meta ul li .tools {
            padding: 0;
            margin: 0;
            text-align: center;
        }
        #cfwhiteboard-wods-meta ul li .tools a {
            background: #f5f5f5;
            color: #333;
            display: block;
            font-weight: bold;
            line-height: 2;
            margin: 0;
            padding: 3px 0;
            text-align: center;
            text-decoration: none;
        }
        #cfwhiteboard-wods-meta ul li .tools a:hover,
        #cfwhiteboard-wods-meta ul li .tools a:focus {
            background: #fff;
            color: #0b4;
        }
        #cfwhiteboard-wods-meta ul li .tools a {
            -webkit-border-bottom-left-radius: 5px;
            -moz-border-radius-bottomleft: 5px;
            border-bottom-left-radius: 5px;
            -webkit-border-bottom-right-radius: 5px;
            -moz-border-radius-bottomright: 5px;
            border-bottom-right-radius: 5px;
        }
        #cfwhiteboard-wods-meta ul li table {
            border-collapse: separate;
            border-spacing: 0;
            margin: 0;
            width: 100%;
        }
        #cfwhiteboard-wods-meta ul li table thead th,
        #cfwhiteboard-wods-meta ul li table thead td,
        #cfwhiteboard-wods-meta ul li table tbody tr + tr th,
        #cfwhiteboard-wods-meta ul li table tbody tr + tr td {
            border-bottom: 1px solid #aaa;
            border-top: none;
        }
        #cfwhiteboard-wods-meta ul li table tbody tr th,
        #cfwhiteboard-wods-meta ul li table tbody tr td,
        #cfwhiteboard-wods-meta ul li .tools {
            border-top: 1px solid #fff;
        }
/*
        #cfwhiteboard-wods-meta ul li table.single-component tbody th,
        #cfwhiteboard-wods-meta ul li table.single-component tbody td {
            border-bottom: 1px solid #aaa;
        }
*/
        #cfwhiteboard-wods-meta ul li table tbody a.delete {
            font-size: 11px;
        }
        #cfwhiteboard-wods-meta ul li table tbody .component-label-show span {
            color: #666;
            font-family: sans-serif;
            line-height: 23px;
            font-size: 12px;
        }
        #cfwhiteboard-wods-meta ul li table tbody tr + tr th,
        #cfwhiteboard-wods-meta ul li table tbody tr + tr td {
            border-bottom: 1px solid #aaa;
            border-top: none;
            padding-top: 2px;
        }
        #cfwhiteboard-wods-meta ul li table th,
        #cfwhiteboard-wods-meta ul li table td {
            vertical-align: top;
        }
        #cfwhiteboard-wods-meta ul li table th {
            font-weight: normal;
            text-align: left;
            padding: 8px 10px;
            width: 30%;
        }
        #cfwhiteboard-wods-meta ul li table th label {
            display: block;
            font-weight: bold;
            line-height: 23px;
        }
        #cfwhiteboard-wods-meta ul li table tr:hover label {
            color: black;
        }
        #cfwhiteboard-wods-meta ul li table th p {
            color: #999;
            font-size: 11px;
            margin: 2px 0 0;
        }
        #cfwhiteboard-wods-meta ul li table th p + p {
            margin: 5px 0 0;
        }
        #cfwhiteboard-wods-meta ul li table td {
            padding: 8px 10px 8px 0;
            width: 70%;
        }
        #cfwhiteboard-wods-meta ul li table td input[type="text"] {
            margin: 0;
            width: 140px;
        }
        #cfwhiteboard-wods-meta ul li table td .component-label-edit input[type="text"] {
            width: 140px;
        }
        #cfwhiteboard-wods-meta ul li table td a.delete {
            color: #666;
            float: right;
            line-height: 23px;
            padding: 0 0 0 8px;
            text-decoration: none;
        }
        #cfwhiteboard-wods-meta ul li table td a.delete:hover,
        #cfwhiteboard-wods-meta ul li table td a.delete:focus {
            color: #d33;
        }
        #cfwhiteboard-wods-meta ul li table td textarea {
            display: block;
            margin: 0;
            outline: none;
            resize: vertical;
        }
        #cfwhiteboard-wods-meta ul li table a.help-alert {
            float: right;
            font-size: 90%;
            font-weight: normal;
            line-height: 2;
            text-decoration: none;
        }
        #cfwhiteboard-wods-meta ul li table.single-component .multi-component {
            display: none;
        }
        #cfwhiteboard-wods-meta ul li table.multi-component .single-component {
            display: none;
        }
        #cfwhiteboard-wods-meta p.tools {
            margin: 16px 0 0;
            padding: 0 6px 20px;
        }
        #cfwhiteboard-wods-meta p.tools a {
            display: inline-block;
            font-weight: bold;
            line-height: 36px;
            margin: 0;
            padding: 0 16px;
            text-decoration: none;
            *display: inline;
            *zoom: 1;
        }
        #cfwhiteboard-wods-meta p.tools a:hover,
        #cfwhiteboard-wods-meta p.tools a:focus {
            background: #fff;
            color: #0b4;
        }
        /* admin notices */
        #cfwhiteboard-admin-notice em {
            font-style: normal;
            color: red;
        }
        /* tinyMCE styling */
        a.mceAction.mce_cfwhiteboard_button {
            overflow: hidden;
            width: 93px !important;
        }
    </style>
    <p class="help">
        Add the classes that you want to track for today.  Each class will have a separate tab in the CF Whiteboard widget.
    </p>
    <p class="help">
        You can track multiple components for each class.  Each component will have a separate entry field so athletes can lookup their results separately for each component.
    </p>
    <ul>
        <?php
        $wods = get_post_meta($object->ID, $CFWHITEBOARD_WODS_META_KEY, true);

        $next_wod_id = 1;
        $next_component_id = 1;

        if (! is_array($wods)) {
            // no wods yet - instantiate empty array
            $wods = array();
            $wods[] = array(
                'name' => 'Workout of the Day',
                'components' => array(),
                'wp_id' => $next_wod_id++
            );
        }
        // else {
        //     // Gather the next_wod_id and next_component_id values
        //     $last_wod = end($new_wods);
        //     $next_wod_id = intval( $last_wod['wp_id'] ) + 10;

        //     $last_component = end( $last_wod['components'] );
        //     $next_component_id = intval( $last_component['wp_id'] ) + 10;
        // }

    
        foreach ($wods as $wod) {
            if ((!is_array( $wod['components'] )) || empty($wod['components'])) {
                $wod['components'] = array();
                $wod['components'][] = array(
                    'description' => '',
                    'label' => '',
                    'wp_id' => $next_component_id++
                );
            }

            ?>
            <li id="cfwhiteboard-wod-<?php echo $wod['wp_id']; ?>">
                <?php echo cfwhiteboard_generate_class_fields($wod); ?>
            </li>
            <?php

            $next_wod_id = max($next_wod_id, intval( $wod['wp_id'] ));
            $last_component = end($wod['components']);
            $next_component_id = max($next_component_id, intval( $last_component['wp_id'] ));
        }

        $next_wod_id += 10;
        $next_component_id += 10;
        ?>
    </ul>
    <p class="tools">
        <a href="javascript://" class="add-class">+ <?php esc_html_e("Track Another Class", 'cf-whiteboard'); ?></a>
    </p>
    <script type="text/javascript">
        typeof(jQuery) == 'function' && jQuery(function($) {
            // Don't let the script run more than once
            if (window.CFW) {
                return;
            }
            window.CFW = {};

            CFW.parseClassDescription = function($container) {
                var classDescription = {
                    name: $container.find('[name$="name"]').val(),
                    components: []
                }

                $container.find('tbody').each(function() {
                    var $tbody = $(this);
                    classDescription.components.push({
                        label: $tbody.find('[name$="label"]').val(),
                        description: $tbody.find('[name$="description"]').val()
                    });
                });

                return classDescription;
            };
            CFW.generateClassDescriptionMarkup = function(classDescription) {
                var linebreak = '\n';

                var markup = '';
                markup += '<strong>'+classDescription.name+'</strong>' + linebreak;
                var count = 0; // must count separately from index because components with blank descriptions are skipped
                for (var i = 0; i < classDescription.components.length; ++i) {
                    var trimmedDescription = classDescription.components[i].description.replace(/^\s+/,'').replace(/\s+$/,'');
                    if (!trimmedDescription) continue;

                    if (count++ > 0) markup += '<em>then</em>' + linebreak;
                    markup += classDescription.components[i].description + linebreak;
                }

                return markup + linebreak;
            };
            CFW.newlineToBr = function(str) {
                return str.replace(/\r\n/g, '<br />').replace(/\r/g, '<br />').replace(/\n/g, '<br />');
            };


            // Move the CF Whiteboard meta box just under the Post Title
            $('#titlediv').after( $('#cfwhiteboard-wods-meta') );


            // Update component numbers
            CFW.updateComponentNumbers = function($container) {
                $container.find('tbody label span').each(function(index) {
                    $(this).text(index + 1); // component numbers start at 1
                });
            };
            // intial numbering
            $('#cfwhiteboard-wods-meta li').each(function() {
                CFW.updateComponentNumbers( $(this) );
            });


            // Component labels logic:
            // Guess component labels
            CFW.guessComponentLabel = function(componentDescription) {
                var matches = componentDescription.replace(/^\s+/, '').replace(/\s+$/, '').match(/[^\r\n]+/);
                if (!matches) return '';

                return matches[0].replace(/^\s+/, '').replace(/:\s*$/, '');
            };
            $('#cfwhiteboard-wods-meta textarea').live('keyup blur paste input textInput', function() {
                var $textarea = $(this);
                var $labelInput = $textarea.closest('tbody').find('.component-label-edit input');

                var guess = CFW.guessComponentLabel( $textarea.val() );

                if (!guess) {
                    // Resume guessing component labels if the text was cleared
                    $labelInput.removeClass('owned-by-user');
                }

                $labelInput.not('.owned-by-user').val(guess).change();
            });
            // Mirror the label input, maybe show the component field & label
            $('#cfwhiteboard-wods-meta .component-label-edit input').live('change', function() {
                var $input = $(this);
                var val = $input.val();
                var $tr = $input.closest('tr');

                // Display field should mirror the text input
                $tr.find('.component-label-show span').text(val || '(not yet labeled)');

                // Logic for showing the component label field (& label) once it has a value
                if (val) {
                    $tr.find('label').removeClass('hidden');
                    $tr.find('.component-label-edit.hidden').siblings('.component-label-show').removeClass('hidden');
                }
            }).live('keypress', function(event) {
                // If they press enter,
                if (event.which == 13) {
                    // 1: Block the form from being submitted
                    event.preventDefault();
                    // 2: Save the label by clicking 'ok' for them
                    $(this).closest('.component-label-edit').find('.save').click();
                }
            });
            // Logic for edit/ok/cancel
            $('#cfwhiteboard-wods-meta .component-label-show .edit').live('click', function() {
                var $stuff = $(this).closest('tr').find('.component-label-show, .component-label-edit').toggleClass('hidden');

                // cache the current value.  if they click cancel, we want to be able to restore it.
                var $input = $stuff.find('input');
                $input.data('valuebeforeedit', $input.val());
                var input = $input[0];
                if (input.focus) input.focus();
                if (input.select) input.select();
            });
            $('#cfwhiteboard-wods-meta .component-label-edit .save').live('click', function() {
                var $this = $(this);

                var $input = $this.siblings('input');
                if (/^\s*$/.test($input.val())) {
                    $input.removeClass('owned-by-user').change();
                } else {
                    // Stop guessing component labels
                    // Trigger mirror to update (on 'change')
                    $input.addClass('owned-by-user').change();
                }

                $this.closest('tr').find('.component-label-show, .component-label-edit').toggleClass('hidden');
            });
            $('#cfwhiteboard-wods-meta .component-label-edit .cancel').live('click', function() {
                var $this = $(this);

                // restore the cached input value
                var $input = $this.siblings('input');
                $input.val($input.data('valuebeforeedit')).change();

                $this.closest('tr').find('.component-label-show, .component-label-edit').toggleClass('hidden');
            });


            // QuickTag Button for HTML editor
            if (QTags && QTags.addButton && !CFW.edButtonAdded) {
                QTags.addButton(
                    'cfw_wods', // id
                    'CF Whiteboard', // display
                    function(button){
                        var $button = $(button);

                        // Gather class names/descriptions
                        var classes = [];
                        var tempClass;
                        jQuery('#cfwhiteboard-wods-meta li').each(function() {
                            tempClass = CFW.parseClassDescription( jQuery(this) );

                            var hasDescription = false;
                            for (var i = 0; i < tempClass.components.length; i++) {
                                if (tempClass.components[i].description.replace(/^\s+/,'').replace(/\s+$/,'')) {
                                    hasDescription = true;
                                    break;
                                }
                            }
                            // only add classes that have descriptions
                            if (!hasDescription) return;

                            // Generate the markup for the class description
                            tempClass.markup = CFW.generateClassDescriptionMarkup(tempClass);

                            classes.push( tempClass );
                        });

                        var options = [];
                        if (!classes.length) {
                            // no classes entered, provide link to CFW meta box
                            options.push({
                                text: 'No workouts. Click to add one.',
                                handler: function() {
                                    window.location = window.location.href.replace(/#.*/, '') + '#cfwhiteboard-wods-meta';
                                    var $metaBox = jQuery('#cfwhiteboard-wods-meta');
                                    if ($metaBox.find('ul:visible').length == 0) {
                                        $metaBox.find('.handlediv').click();
                                    }
                                }
                            });
                        } else if (classes.length > 1) {
                            // multiple classes entered, provide menu item for inserting all at once

                            var markupAll = '';
                            for (var i = 0; i < classes.length; i++) {
                                markupAll += classes[i].markup;
                            }

                            options.push({
                                text: 'Insert All Classes',
                                handler: function() {
                                    QTags.insertContent( markupAll );
                                }
                            });
                        }

                        var generateInsertMarkupFunc = function(markup) {
                            return function() {
                                QTags.insertContent( markup );
                            };
                        };
                        for (var i = 0; i < classes.length; i++) {
                            options.push({
                                text: 'Insert '+classes[i].name,
                                handler: generateInsertMarkupFunc( classes[i].markup )
                            });
                        }

                        var $select = $('<select />').css({
                            'margin': '2px 1px 0 0',
                            'line-height': '18px',
                            'min-width': '26px',
                            'padding': '2px 4px',
                            'font': '12px/18px Arial,Helvetica,sans-serif normal',
                            'color': '#464646',
                            '-webkit-border-radius': '3px',
                            '-moz-border-radius': '3px',
                            'background-color': '#EEE',
                            'background-image': '-webkit-linear-gradient(bottom,#e3e3e3,#fff)',
                            'background-image': '-moz-linear-gradient(bottom,#e3e3e3,#fff)',
                            'background-image': '-ms-linear-gradient(bottom,#e3e3e3,#fff)',
                            'background-image': '-o-linear-gradient(bottom,#e3e3e3,#fff)',
                            'background-image': 'linear-gradient(bottom,#e3e3e3,#fff)',
                            'border': '1px solid #BBB',
                            'border-radius': '3px',
                            'vertical-align': 'top'
                        }).change(function() {
                            var i = parseInt($select.val(), 10);
                            options[i] && options[i].handler && options[i].handler();
                            $select.remove();
                        });

                        $select.append(
                            $('<option selected="selected">Insert Workout(s)</option>')
                        );
                        $.each(options, function(i) {
                            $select.append(
                                $('<option value="'+ i +'">'+ this.text +'</option>')
                            );
                        });

                        $button.after($select);
                    }, // arg1
                    function(){}, // arg2
                    'w', // access_key
                    'Insert Workout Description(s)', // title
                    140 // priority
                );
                CFW.edButtonAdded = true;
            }


            // Add / Remove Classes
            var class_template = '<?php
                $empty_wod = array(
                    "name" => "",
                    "components" => array(
                        array(
                            "description" => "",
                            "label" => "",
                            "wp_id" => "#c#"
                        )
                    ),
                    "wp_id" => "#w#"
                );
                echo str_replace(array("\r\n", "\n", "\r"), "", cfwhiteboard_generate_class_fields($empty_wod) );
            ?>';
            var next_class_id = <?php esc_attr_e( $next_wod_id ); ?>;
            var next_component_id = <?php esc_attr_e( $next_component_id ); ?>;
            $('a.add-class').click(function() {
                var $ul = $('#cfwhiteboard-wods-meta ul');
                var html = class_template.replace(/#w#/g, next_class_id++).replace(/#c#/g, next_component_id++);
                var $new = $('<li />').html(html);
                $ul.append( $new );

                CFW.updateComponentNumbers( $new );
            });
            $('a.remove-class').live('click', function() {
                if (confirm('remove this class?')) {
                    $(this).closest('li').remove();
                }
            });


            // Add / Remove Components of Classes
            function updateSingleMultiComponent($table) {
                if ($table.find('tbody').length > 1) {
                    $table.removeClass('single-component').addClass('multi-component');
                } else {
                    $table.removeClass('multi-component').addClass('single-component');
                }
            }

            var component_template = '<?php
                $empty_component = array(
                    "description" => "",
                    "label" => "",
                    "wp_id" => "#c#"
                );
                echo str_replace(array("\r\n", "\n", "\r"), "", cfwhiteboard_generate_class_component_fields("cfwhiteboard-wod-#w#-cmp-", $empty_component));
            ?>';
            $('a.add-component').live('click', function() {
                var $this = $(this);
                var $table = $this.closest('li').find('table');
                var html = component_template.replace(/#w#/g, $this.data('classid')).replace(/#c#/g, next_component_id++);
                var $new = $(html);
                $table.append( $new );

                updateSingleMultiComponent($table);

                CFW.updateComponentNumbers($table);
            });
            $('a.remove-component').live('click', function() {
                if (confirm('remove this component?')) {
                    var $this = $(this);
                    var $table = $this.closest('table');
                    $this.closest('tbody').remove();

                    updateSingleMultiComponent($table);

                    CFW.updateComponentNumbers($table);
                }
            });

            // help messages!
            $('a.help-alert').live('click', function(event) {
                event.preventDefault();
                alert($(this).data('message').replace(/<br>/g,'\n').replace(/&apos;/g,"'").replace(/&quot;/g, '"'));
            });
        });
    </script>

<?php

}

function cfwhiteboard_mce_buttons( $buttons ) {

    array_unshift( $buttons, 'cfwhiteboard_button', '|' );

    return $buttons;
}
function cfwhiteboard_mce_external_plugins( $plugins ) {
    
    $plugins['CfWhiteboard'] = plugins_url('cfwhiteboard-post-editor/mce-plugin.js' , __FILE__);
    
    return $plugins;
}

/* Save the meta box's post metadata. */
function cfwhiteboard_save_post_meta_boxes($post_id, $post) {
    global $CFWHITEBOARD_WODS_META_KEY;

    /* Verify the nonce before proceeding. */
    if ( !isset( $_POST[$CFWHITEBOARD_WODS_META_KEY] ) || !wp_verify_nonce( $_POST[$CFWHITEBOARD_WODS_META_KEY], basename( __FILE__ ) ) )
        return $post_id;

    /* Get the post type object. */
    $post_type = get_post_type_object( $post->post_type );

    /* Check if the current user has permission to edit the post. */
    if ( !current_user_can( $post_type->cap->edit_post, $post_id ) )
        return $post_id;

    /* Get the posted data. */
    $param_prefix = 'cfwhiteboard-wod-';
    $param_prefix_len = strlen( $param_prefix );

    if (! is_array($_POST)) return;
    $new_wods = array();
    foreach ($_POST as $name => $value) {

        $name_prefix = substr($name, 0, $param_prefix_len);
        if (strcmp($name_prefix, $param_prefix) == 0) {
            $name = substr($name, $param_prefix_len);
            $name = explode('-', $name);

            $wod_id = $name[0];

            if (!is_array( $new_wods[$wod_id] )) {
                $new_wods[$wod_id] = array(
                    'name' => '',
                    'components' => array(),
                    'wp_id' => $wod_id
                );
            }

            if (strcmp($name[1], 'name') == 0) {
                // cfwhiteboard-wod-<wod_id>-name
                $new_wods[$wod_id]['name'] = $value;

            } elseif (strcmp($name[1], 'cmp') == 0) {
                // cfwhiteboard-wod-<wod_id>-cmp-<component_id>-...
                $component_id = $name[2];

                if (!is_array( $new_wods[$wod_id]['components'][$component_id] )) {
                    $new_wods[$wod_id]['components'][$component_id] = array(
                        'description' => '',
                        'label' => '',
                        'wp_id' => $component_id
                    );
                }

                if (strcmp($name[3], 'description') == 0) {
                    // cfwhiteboard-wod-<wod_id>-cmp-<component_id>-description
                    $new_wods[$wod_id]['components'][$component_id]['description'] = $value;

                } elseif (strcmp($name[3], 'label') == 0) {
                    // cfwhiteboard-wod-<wod_id>-cmp-<component_id>-label
                    $new_wods[$wod_id]['components'][$component_id]['label'] = $value;

                }
            }
        }

    }

    // Don't delete the users wods! instead just don't render them and tell them what's wrong
    // if (get_post_status($post_id) == "publish") {
    //     $new_wods = cfwhiteboard_clean_post_meta($new_wods);
    // } else {
        // reindex wods and their components
        $temp_wods = array();
        foreach ($new_wods as $wod) {

            $temp_cmps = array();
            foreach ($wod['components'] as $component) {
                $temp_cmps[] = $component;
            }

            $wod['components'] = $temp_cmps;
            $temp_wods[] = $wod;
        }    
        $new_wods = $temp_wods;
    // }

    /* Update or Delete the meta value of the custom field key. */
    // if (! empty($new_wods)) {
        update_post_meta($post_id, $CFWHITEBOARD_WODS_META_KEY, $new_wods);
    // } else {
    //     delete_post_meta($post_id, $CFWHITEBOARD_WODS_META_KEY);
    // }

    set_transient($CFWHITEBOARD_WODS_META_KEY.'-notice', cfwhiteboard_validate_post_meta( $new_wods ), 30);
}
function cfwhiteboard_clean_post_meta( $wods ) {
    // Clean the meta values (no blank fields)
    $next_id = 10000;

    if (! is_array($wods)) return $wods;
    $temp_wods = array();

    foreach ($wods as $wod) {

        if (! is_array($wod['components'])) continue;
        $temp_cmps = array();

        foreach ($wod['components'] as $component) {
            if (empty($component['label']) || empty($component['description'])) continue;
            if (empty($component['wp_id'])) $component['wp_id'] = $next_id++;
            $temp_cmps[] = $component;
        }
        $wod['components'] = $temp_cmps;

        if (empty($wod['name']) || empty($wod['components'])) continue;
        if (empty($wod['wp_id'])) $wod['wp_id'] = $next_id++;
        $temp_wods[] = $wod;
    }

    return $temp_wods;
}
function cfwhiteboard_validate_post_meta( $wods ) {
    $validations = array();

    if (! is_array($wods)) return $validations;

    foreach ($wods as $wod) {
        $key = $wod['wp_id'];
        $validations[$key] = array(
            'name' => empty($wod['name']) ? '' : $wod['name'],
            'valid' => 0,
            'total' => 0
        );

        if (! is_array($wod['components'])) continue;

        foreach ($wod['components'] as $component) {
            $validations[$key]['total']++;
            if (empty($component['label']) || empty($component['description'])) continue;
            $validations[$key]['valid']++;
        }
    }

    return $validations;
}
function cfwhiteboard_save_post_meta_notices(){
    global $CFWHITEBOARD_WODS_META_KEY;
    
    $validations = get_transient($CFWHITEBOARD_WODS_META_KEY.'-notice');

    if (! is_array($validations)) return;

    $validation_items = '';
    $counter = 0;
    foreach ($validations as $wod_id => $validation) {
        $counter++;
        $hasName = !empty($validation['name']);
        $name = $hasName ? $validation['name'] : (__('Class', 'cf-whiteboard').' '.$counter);
        $willBePublished = $hasName && ($validation['valid'] > 0);
        $totallyValid = $validation['valid'] == $validation['total'];
        $publishedTail = 'will be published ('.($totallyValid ? '' : '<em>').$validation['valid'].' of '.$validation['total'].($totallyValid ? '' : '</em>').' components saved)';
        $notPublishedTail = 'will <em>not be published</em> ('.($hasName ? 'please enter at least one component description' : 'please enter a name for the class').')';
        $validation_items .= '<li><a href="#cfwhiteboard-wod-'.$wod_id.'">'.$name.'</a> '.($willBePublished ? $publishedTail : $notPublishedTail ).'</li>';
    }

    echo '<div id="cfwhiteboard-admin-notice" class="updated">
       <p>'.__('CF Whiteboard Status:', 'cf-whiteboard').'</p>
       <ul>'. $validation_items .'</ul>
    </div>';
}


function cfwhiteboard_json_meta() {
    global $CFWHITEBOARD_WODS_META_KEY;
    global $CFWHITEBOARD_VERSION;
    $options = cfwhiteboard_get_options();
    
    $query_var = cfwhiteboard_get_query_var('cfwhiteboard_post_id');
    if (!$query_var) return;

    $post = get_post($query_var);

    $response = array(
        'post_id' => $post->ID,
        'post_modified' => $post->post_modified,
        'meta' => get_post_meta($query_var, $CFWHITEBOARD_WODS_META_KEY, true),
        'home_url' => home_url(),
        'athletes_page_id' => $options['athletes_page_id'],
        'athletes_url' => get_permalink( $options['athletes_page_id'] ),
        'wp_name' => get_bloginfo('name'),
        'wp_version' => get_bloginfo('version'),
        'wp_language' => get_bloginfo('language'),
        'cfw_version' => $CFWHITEBOARD_VERSION
    );

    header('HTTP/1.1 200 OK', true);
    header('Content-Type: application/json; charset=UTF-8', true);
    // echo cfwhiteboard_strip_magic_quotes($response);
    echo json_encode($response);
    
    exit;
}
function cfwhiteboard_get_query_var($key) {
    $wp_query_var = get_query_var($key);
    if ($wp_query_var) {
      return $wp_query_var;
    }
    
    return isset($_REQUEST[$key]) ? $_REQUEST[$key] : null;
}
function cfwhiteboard_strip_magic_quotes($value) {
    if (get_magic_quotes_gpc()) {
        return stripslashes($value);
    } else {
        return $value;
    }
}
if (!function_exists('json_encode'))
{
  function json_encode($a=false)
  {
    if (is_null($a)) return 'null';
    if ($a === false) return 'false';
    if ($a === true) return 'true';
    if (is_scalar($a))
    {
      if (is_float($a))
      {
        // Always use "." for floats.
        return floatval(str_replace(",", ".", strval($a)));
      }

      if (is_string($a))
      {
        static $jsonReplaces = array(array("\\", "/", "\n", "\t", "\r", "\b", "\f", '"'), array('\\\\', '\\/', '\\n', '\\t', '\\r', '\\b', '\\f', '\"'));
        return '"' . str_replace($jsonReplaces[0], $jsonReplaces[1], $a) . '"';
      }
      else
        return $a;
    }
    $isList = true;
    for ($i = 0, reset($a); $i < count($a); $i++, next($a))
    {
      if (key($a) !== $i)
      {
        $isList = false;
        break;
      }
    }
    $result = array();
    if ($isList)
    {
      foreach ($a as $v) $result[] = json_encode($v);
      return '[' . join(',', $result) . ']';
    }
    else
    {
      foreach ($a as $k => $v) $result[] = json_encode($k).':'.json_encode($v);
      return '{' . join(',', $result) . '}';
    }
  }
}





/*************************
/*
/* Athletes Page
/*
/*************************/

add_action('wp', 'cfwhiteboard_init_athletes_page');
function cfwhiteboard_init_athletes_page() {
    $options = cfwhiteboard_get_options();

    // Debugging
    // if (! (is_user_logged_in() && wp_get_current_user()->first_name == "Collin"))
    //     return;

   if (! is_page($options['athletes_page_id']))
       return;
        
    // add_action('wp_print_styles', 'cfwhiteboard_stylesheet', 999999);
    add_action('wp_enqueue_scripts', 'cfwhiteboard_athletes_scripts', 999999);
    add_action('wp_enqueue_scripts', 'cfwhiteboard_athletes_scripts_data', 1000000);
    add_action('wp_enqueue_scripts', 'cfwhiteboard_latest_jquery', 1);
    // add_action('template_redirect', 'cfwhiteboard_json_meta');

    add_filter('post_class', 'cfwhiteboard_trace_post', 999999, 2);
    add_filter('the_title', 'cfwhiteboard_trace_title', 999999, 2);
    // add_filter('the_excerpt', 'cfwhiteboard_trace_excerpt', 999999, 2);
    add_filter('the_content', 'cfwhiteboard_trace_content', 999999, 2);
    add_filter('the_category', 'cfwhiteboard_trace_category', 999999, 2);
    add_filter('the_tags', 'cfwhiteboard_trace_tags', 999999, 2);
}
function cfwhiteboard_is_athletes_page($id) {
    $options = cfwhiteboard_get_options();

    if (empty($id)) $id = get_the_ID();

    // Workaround for bug in WP < 3.3 where title filters are passed the entire post object instead of just the id
    if (isset($id, $id->ID)) {
        $id = $id->ID;
    }

    return $id == $options['athletes_page_id'];
}
function cfwhiteboard_trace_post($post_classes, $id = NULL) {
    if (!cfwhiteboard_is_athletes_page($id))
        return $post_classes;

    $post_classes[] = 'cfw-post-tracer';
    return $post_classes;
}
function cfwhiteboard_trace_title($title, $id = NULL) {
    if (!cfwhiteboard_is_athletes_page($id))
        return $title;

    return '<span class="cfw-title-tracer">' . $title . '</span>';
}
function cfwhiteboard_trace_content($content, $id = NULL) {
    if (!cfwhiteboard_is_athletes_page($id))
        return $content;

    return '<span class="cfw-content-tracer">' . $content . '</span>';
}
function cfwhiteboard_trace_category($category, $id = NULL) {
    if (!cfwhiteboard_is_athletes_page($id))
        return $category;

    return '<span class="cfw-category-tracer">' . $category . '</span>';
}
function cfwhiteboard_trace_tags($tags, $id = NULL) {
    if (!cfwhiteboard_is_athletes_page($id))
        return $tags;

    return '<span class="cfw-tags-tracer">' . $tags . '</span>';
}

function cfwhiteboard_athletes_scripts() {
    global $CFWHITEBOARD_VERSION;
    if (!isset($CFWHITEBOARD_VERSION)) $CFWHITEBOARD_VERSION = '0.0';
    
    wp_enqueue_script('cfwhiteboard-athletes',
        plugins_url('all-athletes.js', __FILE__),
        array('jquery'),
        $CFWHITEBOARD_VERSION
    );
}

function cfwhiteboard_athletes_scripts_data() {
    $options = cfwhiteboard_get_options();

    $page_id = $options['athletes_page_id'];
    $page = null;
    if(!empty($page_id)) $page = get_page($page_id);

    $data = array();
    $data['affiliate_id'] = $options['affiliate_id'];
    $data['athletes_page_permalink'] = get_permalink( $options['athletes_page_id'] );
    if (!empty($page)) {
        $data['athletes_page_name'] = $page->post_name;
        $data['athletes_page_title'] = $page->post_title;
    }

    // global $wp_rewrite;
    // $data['rewrite_rules'] = $wp_rewrite->rules;

    wp_localize_script('cfwhiteboard-athletes', 'CFW_OPTIONS', $data);
}


// from http://codex.wordpress.org/Class_Reference/WP_Rewrite
add_filter('rewrite_rules_array', 'cfwhiteboard_athletes_insert_rewrite_rules', 1999999);
add_filter('query_vars', 'cfwhiteboard_athletes_insert_query_vars');
add_action('wp_loaded', 'cfwhiteboard_athletes_flush_rules');
// flush_rules() if our rules are not yet included
function cfwhiteboard_athletes_flush_rules() {
    $options = cfwhiteboard_get_options();
    $page_id = $options['athletes_page_id'];
    $page = null;
    if(!empty($page_id)) $page = get_page($page_id);

    $rules = get_option( 'rewrite_rules' );
    if (!empty($page) && !isset( $rules['('.$page->post_name.')/([^/]+)/?$'] ) ) {
        global $wp_rewrite;
        $wp_rewrite->flush_rules();
    }
}
// Adding a new rule
function cfwhiteboard_athletes_insert_rewrite_rules($rules) {
    $options = cfwhiteboard_get_options();
    $page_id = $options['athletes_page_id'];
    $page = null;
    if(!empty($page_id)) $page = get_page($page_id);

    $newrules = array();

    if (!empty($page)) {
        $newrules['('.$page->post_name.')/([^/]+)/?$'] = 'index.php?pagename=$matches[1]&cfwathlete=$matches[2]';
    }

    return $newrules + $rules;
}
// Adding the id var so that WP recognizes it
function cfwhiteboard_athletes_insert_query_vars($vars) {
    array_push($vars, 'cfwathlete');
    return $vars;
}




?>
